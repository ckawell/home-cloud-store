kind: ConfigMap
apiVersion: v1
metadata:
  name: searxng
  namespace: {{ .Release.Name }}
data:
  uwsgi.ini: |
    [uwsgi]
    # Who will run the code
    uid = searxng
    gid = searxng

    # Number of workers (usually CPU count)
    workers = %k
    threads = 2

    # The right granted on the created socket
    chmod-socket = 666

    # Plugin to use and interpreter config
    single-interpreter = true
    master = true
    plugin = python3
    lazy-apps = true
    enable-threads = 4

    # Module to import
    module = searx.webapp

    # Virtualenv and python path
    pythonpath = /usr/local/searxng/
    chdir = /usr/local/searxng/searx/

    # automatically set processes name to something meaningful
    auto-procname = true

    # Disable request logging for privacy
    disable-logging = true
    log-5xx = true

    # Set the max size of a request (request-body excluded)
    buffer-size = 8192

    # No keep alive
    # See https://github.com/searx/searx-docker/issues/24
    add-header = Connection: close

    # uwsgi serves the static files
    # expires set to one year since there are hashes
    static-map = /static=/usr/local/searxng/searx/static
    static-expires = /* 31557600
    static-gzip-all = True
    offload-threads = 4

    # Cache
    cache2 = name=searxngcache,items=2000,blocks=2000,blocksize=4096,bitmap=1
  settings.yml: |
    general:
      # Debug mode, only for development. Is overwritten by ${SEARXNG_DEBUG}
      debug: false
      # displayed name
      instance_name: "Search"
      # For example: https://example.com/privacy
      privacypolicy_url: false
      # use true to use your own donation page written in searx/info/en/donate.md
      # use false to disable the donation link
      donation_url: false
      # mailto:contact@example.com
      contact_url: false
      # record stats
      enable_metrics: true

    brand:
      new_issue_url: https://github.com/searxng/searxng/issues/new
      docs_url: https://docs.searxng.org/
      public_instances: https://searx.space
      wiki_url: https://github.com/searxng/searxng/wiki
      issue_url: https://github.com/searxng/searxng/issues

    search:
      # Filter results. 0: None, 1: Moderate, 2: Strict
      safe_search: 1
      # Existing autocomplete backends: "dbpedia", "duckduckgo", "google", "yandex",
      # "seznam", "startpage", "swisscows", "qwant", "wikipedia" - leave blank to turn it off
      # by default.
      autocomplete: ""
      # minimun characters to type before autocompleter starts
      autocomplete_min: 4
      # Default search language - leave blank to detect from browser information or
      # use codes from 'languages.py'
      default_lang: "auto"
      # Available languages
      # languages:
      #   - all
      #   - en
      #   - en-US
      #   - de
      #   - it-IT
      #   - fr
      #   - fr-BE
      # ban time in seconds after engine errors
      ban_time_on_fail: 5
      # max ban time in seconds after engine errors
      max_ban_time_on_fail: 120
      suspended_times:
        # Engine suspension time after error (in seconds; set to 0 to disable)
        # For error "Access denied" and "HTTP error [402, 403]"
        SearxEngineAccessDenied: 86400
        # For error "CAPTCHA"
        SearxEngineCaptcha: 86400
        # For error "Too many request" and "HTTP error 429"
        SearxEngineTooManyRequests: 3600
        # Cloudflare CAPTCHA
        cf_SearxEngineCaptcha: 1296000
        cf_SearxEngineAccessDenied: 86400
        # ReCAPTCHA
        recaptcha_SearxEngineCaptcha: 604800

      # remove format to deny access, use lower case.
      # formats: [html, csv, json, rss]
      formats:
        - html
        - json

    server:
      # If you change port, bind_address or base_url don't forget to rebuild
      # instance's environment (make buildenv). Is overwritten by ${SEARXNG_PORT}
      # and ${SEARXNG_BIND_ADDRESS}
      port: 8080
      bind_address: "127.0.0.1"
      # public URL of the instance, to ensure correct inbound links. Is overwritten
      # by ${SEARXNG_URL}.
      {{- with (first .Values.homeCloud.routes) }}
      base_url: http://{{ .name }}.local
      {{- end }}
      limiter: false  # rate limit the number of request on the instance, block some bots

      # If your instance owns a /etc/searxng/settings.yml file, then set the following
      # values there.

      secret_key: "aae2c25fe21340936fa2e6a54d91dd1b2eb785e6f7ae51610d6af2dd76be75b2"  # Is overwritten by ${SEARXNG_SECRET}
      # Proxying image results through searx
      image_proxy: false
      # 1.0 and 1.1 are supported
      http_protocol_version: "1.0"
      # POST queries are more secure as they don't show up in history but may cause
      # problems when using Firefox containers
      method: "POST"
      default_http_headers:
        X-Content-Type-Options: nosniff
        X-XSS-Protection: 1; mode=block
        X-Download-Options: noopen
        X-Robots-Tag: noindex, nofollow
        Referrer-Policy: no-referrer

    redis:
      # URL to connect redis database. Is overwritten by ${SEARXNG_REDIS_URL}.
      # https://redis-py.readthedocs.io/en/stable/connections.html#redis.client.Redis.from_url
      url: false

    ui:
      # Custom static path - leave it blank if you didn't change
      static_path: ""
      static_use_hash: false
      # Custom templates path - leave it blank if you didn't change
      templates_path: ""
      # query_in_title: When true, the result page's titles contains the query
      # it decreases the privacy, since the browser can records the page titles.
      query_in_title: false
      # infinite_scroll: When true, automatically loads the next page when scrolling to bottom of the current page.
      infinite_scroll: true
      # ui theme
      default_theme: simple
      # center the results ?
      center_alignment: true
      # URL prefix of the internet archive, don't forgett trailing slash (if needed).
      # cache_url: "https://webcache.googleusercontent.com/search?q=cache:"
      # Default interface locale - leave blank to detect from browser information or
      # use codes from the 'locales' config section
      default_locale: ""
      # Open result links in a new tab by default
      results_on_new_tab: true
      theme_args:
        # style of simple theme: auto, light, dark
        simple_style: auto

    # Lock arbitrary settings on the preferences page.  To find the ID of the user
    # setting you want to lock, check the ID of the form on the page "preferences".
    #
    # preferences:
    #   lock:
    #     - language
    #     - autocomplete
    #     - method
    #     - query_in_title

    # searx supports result proxification using an external service:
    # https://github.com/asciimoo/morty uncomment below section if you have running
    # morty proxy the key is base64 encoded (keep the !!binary notation)
    # Note: since commit af77ec3, morty accepts a base64 encoded key.
    #
    # result_proxy:
    #   url: http://127.0.0.1:3000/
    #   # the key is a base64 encoded string, the YAML !!binary prefix is optional
    #   key: !!binary "your_morty_proxy_key"
    #   # [true|false] enable the "proxy" button next to each result
    #   proxify_results: true

    # communication with search engines
    #
    outgoing:
      # default timeout in seconds, can be override by engine
      request_timeout: 10.0
      # the maximum timeout in seconds
      # max_request_timeout: 10.0
      # suffix of searx_useragent, could contain information like an email address
      # to the administrator
      useragent_suffix: ""
      # The maximum number of concurrent connections that may be established.
      pool_connections: 100
      # Allow the connection pool to maintain keep-alive connections below this
      # point.
      pool_maxsize: 20
      # See https://www.python-httpx.org/http2/
      enable_http2: true
      # uncomment below section if you want to use a custom server certificate
      # see https://www.python-httpx.org/advanced/#changing-the-verification-defaults
      # and https://www.python-httpx.org/compatibility/#ssl-configuration
      #  verify: ~/.mitmproxy/mitmproxy-ca-cert.cer
      #
      # uncomment below section if you want to use a proxyq see: SOCKS proxies
      #   https://2.python-requests.org/en/latest/user/advanced/#proxies
      # are also supported: see
      #   https://2.python-requests.org/en/latest/user/advanced/#socks
      #
      #proxies:
      #  http: socks5://sandbox.local:9150
      #  https: socks5://sandbox.local:9150
      #
      #using_tor_proxy: true
      #
      # Extra seconds to add in order to account for the time taken by the proxy
      #
      #extra_proxy_timeout: 10
      #
      # uncomment below section only if you have more than one network interface
      # which can be the source of outgoing search requests
      #
      #  source_ips:
      #    - 1.1.1.1
      #    - 1.1.1.2
      #    - fe80::/126

    # External plugin configuration, for more details see
    #   https://docs.searxng.org/dev/plugins.html
    #
    # plugins:
    #   - plugin1
    #   - plugin2
    #   - ...

    # Comment or un-comment plugin to activate / deactivate by default.
    #
    # enabled_plugins:
    #   # these plugins are enabled if nothing is configured ..
    #   - 'Hash plugin'
    #   - 'Search on category select'
    #   - 'Self Information'
    #   - 'Tracker URL remover'
    #   - 'Ahmia blacklist'  # activation depends on outgoing.using_tor_proxy
    #   # these plugins are disabled if nothing is configured ..
    #   - 'Hostname replace'  # see hostname_replace configuration below
    #   - 'Open Access DOI rewrite'
    #   - 'Vim-like hotkeys'
    #   - 'Tor check plugin'
    #   # Read the docs before activate: auto-detection of the language could be
    #   # detrimental to users expectations / users can activate the plugin in the
    #   # preferences if they want.
    #   - 'Autodetect search language'

    # Configuration of the "Hostname replace" plugin:
    #
    hostname_replace:
    #   '(.*\.)?youtube\.com$': 'invidious.example.com'
    #   '(.*\.)?youtu\.be$': 'invidious.example.com'
    #   '(.*\.)?youtube-noocookie\.com$': 'yotter.example.com'
    #   '(.*\.)?reddit\.com$': 'teddit.example.com'
    #   '(.*\.)?redd\.it$': 'teddit.example.com'
      '(.*\.)?reddit\.com$': 'web.archive.org/web/https://old.reddit.com'
    #   '(www\.)?twitter\.com$': 'nitter.example.com'
    #   # to remove matching host names from result list, set value to false
    #   'spam\.example\.com': false

    checker:
      # disable checker when in debug mode
      off_when_debug: true

      # use "scheduling: false" to disable scheduling
      # scheduling: interval or int

      # to activate the scheduler:
      # * uncomment "scheduling" section
      # * add "cache2 = name=searxngcache,items=2000,blocks=2000,blocksize=4096,bitmap=1"
      #   to your uwsgi.ini

      # scheduling:
      #   start_after: [300, 1800]  # delay to start the first run of the checker
      #   every: [86400, 90000]     # how often the checker runs

      # additional tests: only for the YAML anchors (see the engines section)
      #
      additional_tests:
        rosebud: &test_rosebud
          matrix:
            query: rosebud
            lang: en
          result_container:
            - not_empty
            - ['one_title_contains', 'citizen kane']
          test:
            - unique_results

        android: &test_android
          matrix:
            query: ['android']
            lang: ['en', 'de', 'fr', 'zh-CN']
          result_container:
            - not_empty
            - ['one_title_contains', 'google']
          test:
            - unique_results

      # tests: only for the YAML anchors (see the engines section)
      tests:
        infobox: &tests_infobox
          infobox:
            matrix:
              query: ["linux", "new york", "bbc"]
            result_container:
              - has_infobox

    categories_as_tabs:
      general:
      images:
      videos:
      news:
      map:
      music:
      it:
      science:
      files:
      social media:

    engines:
      # Requires Tor
      # - name: ahmia
      #   engine: ahmia
      #   using_tor_proxy: true
      #   proxies:
      #     all://:
      #       - socks5h://192.168.1.26:9150
      #   categories: onions
      #   enable_http: true
      #   shortcut: ah
      #   timeout: 20

      - name: wikipedia
        tokens: {{ .Values.config.tokens }}
        engine: wikipedia
        shortcut: wp
        base_url: 'https://{language}.wikipedia.org/'

      - name: bing
        tokens: {{ .Values.config.tokens }}
        engine: bing
        shortcut: bi
        disabled: true

      - name: bing images
        tokens: {{ .Values.config.tokens }}
        engine: bing_images
        shortcut: bii

      - name: bing news
        tokens: {{ .Values.config.tokens }}
        engine: bing_news
        shortcut: bin

      - name: bing videos
        tokens: {{ .Values.config.tokens }}
        engine: bing_videos
        shortcut: biv

      - name: currency
        tokens: {{ .Values.config.tokens }}
        engine: currency_convert
        categories: general
        shortcut: cc

      - name: wikidata
        tokens: {{ .Values.config.tokens }}
        engine: wikidata
        shortcut: wd
        timeout: 3.0
        weight: 2
        tests: *tests_infobox

      - name: duckduckgo
        tokens: {{ .Values.config.tokens }}
        engine: duckduckgo
        shortcut: ddg

      - name: duckduckgo images
        tokens: {{ .Values.config.tokens }}
        engine: duckduckgo_images
        shortcut: ddi
        timeout: 3.0
        disabled: true

      - name: duckduckgo weather
        tokens: {{ .Values.config.tokens }}
        engine: duckduckgo_weather
        shortcut: ddw
        disabled: true

      - name: github
        tokens: {{ .Values.config.tokens }}
        engine: github
        shortcut: gh

      - name: google
        tokens: {{ .Values.config.tokens }}
        engine: google
        shortcut: go
        # additional_tests:
        #   android: *test_android

      - name: google images
        tokens: {{ .Values.config.tokens }}
        engine: google_images
        shortcut: goi
        # additional_tests:
        #   android: *test_android
        #   dali:
        #     matrix:
        #       query: ['Dali Christ']
        #       lang: ['en', 'de', 'fr', 'zh-CN']
        #     result_container:
        #       - ['one_title_contains', 'Salvador']

      - name: google news
        tokens: {{ .Values.config.tokens }}
        engine: google_news
        shortcut: gon
        # additional_tests:
        #   android: *test_android

      - name: google videos
        tokens: {{ .Values.config.tokens }}
        engine: google_videos
        shortcut: gov
        # additional_tests:
        #   android: *test_android

      - name: google scholar
        tokens: {{ .Values.config.tokens }}
        engine: google_scholar
        shortcut: gos

      - name: openstreetmap
        tokens: {{ .Values.config.tokens }}
        engine: openstreetmap
        shortcut: osm

      - name: qwant
        qwant_categ: web
        tokens: {{ .Values.config.tokens }}
        engine: qwant
        shortcut: qw
        categories: [general, web]
        disabled: false
        additional_tests:
          rosebud: *test_rosebud

      - name: qwant news
        qwant_categ: news
        tokens: {{ .Values.config.tokens }}
        engine: qwant
        shortcut: qwn
        categories: news
        disabled: false
        network: qwant

      - name: qwant images
        qwant_categ: images
        tokens: {{ .Values.config.tokens }}
        engine: qwant
        shortcut: qwi
        categories: [images, web]
        disabled: false
        network: qwant

      - name: qwant videos
        qwant_categ: videos
        tokens: {{ .Values.config.tokens }}
        engine: qwant
        shortcut: qwv
        categories: [videos, web]
        disabled: false
        network: qwant

      - name: stackoverflow
        tokens: {{ .Values.config.tokens }}
        engine: stackexchange
        shortcut: st
        api_site: 'stackoverflow'
        categories: [it, q&a]

      - name: superuser
        tokens: {{ .Values.config.tokens }}
        engine: stackexchange
        shortcut: su
        api_site: 'superuser'
        categories: [it, q&a]

      - name: youtube
        shortcut: yt
        # You can use the engine using the official stable API, but you need an API
        # key See: https://console.developers.google.com/project
        #
        # engine: youtube_api
        # api_key: 'apikey' # required!
        #
        # Or you can use the html non-stable engine, activated by default
        tokens: {{ .Values.config.tokens }}
        engine: youtube_noapi

      - name: wolframalpha
        shortcut: wa
        # You can use the engine using the official stable API, but you need an API
        # key.  See: https://products.wolframalpha.com/api/
        #
        # engine: wolframalpha_api
        # api_key: ''
        #
        # Or you can use the html non-stable engine, activated by default
        tokens: {{ .Values.config.tokens }}
        engine: wolframalpha_noapi
        timeout: 6.0
        categories: []

      - name: brave
        shortcut: brave
        tokens: {{ .Values.config.tokens }}
        engine: xpath
        paging: true
        time_range_support: true
        first_page_num: 0
        time_range_url: "&tf={time_range_val}"
        search_url: https://search.brave.com/search?q={query}&offset={pageno}&spellcheck=1{time_range}
        url_xpath: //a[@class="result-header"]/@href
        title_xpath: //span[@class="snippet-title"]
        content_xpath: //p[1][@class="snippet-description"]
        suggestion_xpath: //div[@class="text-gray h6"]/a
        time_range_map:
          day: 'pd'
          week: 'pw'
          month: 'pm'
          year: 'py'
        categories: [general, web]
        disabled: true
        headers:
          Accept-Encoding: gzip, deflate
        about:
          website: https://brave.com/search/
          wikidata_id: Q107355971
          use_official_api: false
          require_api_key: false
          results: HTML

    doi_resolvers:
      oadoi.org: 'https://oadoi.org/'
      doi.org: 'https://doi.org/'
      doai.io: 'https://dissem.in/'
      sci-hub.se: 'https://sci-hub.se/'
      sci-hub.st: 'https://sci-hub.st/'
      sci-hub.ru: 'https://sci-hub.ru/'

    default_doi_resolver: 'oadoi.org'
